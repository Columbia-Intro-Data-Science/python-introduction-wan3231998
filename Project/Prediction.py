{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.naive_bayes import GaussianNB\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "pokemon = pd.read_csv('pokemon.csv')\n",
    "combats = pd.read_csv('combats.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "pokemon['Type 2'] = pokemon['Type 2'].fillna('None')\n",
    "pokemon['Name'] = pokemon['Name'].fillna('Primeape')\n",
    "pokemon['Type 1'] = pokemon['Type 1'].replace('Fight', 'Fighting')\n",
    "pokemon['Type 2'] = pokemon['Type 2'].replace('Fight', 'Fighting')\n",
    "pokemon['stats_sum'] = pokemon['HP'] + pokemon['Attack'] + pokemon['Defense'] + pokemon['Sp. Atk']\\\n",
    "                       + pokemon['Sp. Def'] + pokemon['Speed']\n",
    "pokemon = pokemon.drop(['Generation','Legendary'],axis = 1)\n",
    "pokemon['Type'] = pokemon.apply(lambda x: x[\"Type 1\"]+\"/\"+x[\"Type 2\"], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>#</th>\n",
       "      <th>Name</th>\n",
       "      <th>Type 1</th>\n",
       "      <th>Type 2</th>\n",
       "      <th>HP</th>\n",
       "      <th>Attack</th>\n",
       "      <th>Defense</th>\n",
       "      <th>Sp. Atk</th>\n",
       "      <th>Sp. Def</th>\n",
       "      <th>Speed</th>\n",
       "      <th>stats_sum</th>\n",
       "      <th>Type</th>\n",
       "      <th>ratio</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Bulbasaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>45</td>\n",
       "      <td>49</td>\n",
       "      <td>49</td>\n",
       "      <td>65</td>\n",
       "      <td>65</td>\n",
       "      <td>45</td>\n",
       "      <td>318</td>\n",
       "      <td>Grass/Poison</td>\n",
       "      <td>0.278195</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Ivysaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>60</td>\n",
       "      <td>62</td>\n",
       "      <td>63</td>\n",
       "      <td>80</td>\n",
       "      <td>80</td>\n",
       "      <td>60</td>\n",
       "      <td>405</td>\n",
       "      <td>Grass/Poison</td>\n",
       "      <td>0.380165</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Venusaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>80</td>\n",
       "      <td>82</td>\n",
       "      <td>83</td>\n",
       "      <td>100</td>\n",
       "      <td>100</td>\n",
       "      <td>80</td>\n",
       "      <td>525</td>\n",
       "      <td>Grass/Poison</td>\n",
       "      <td>0.674242</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Mega Venusaur</td>\n",
       "      <td>Grass</td>\n",
       "      <td>Poison</td>\n",
       "      <td>80</td>\n",
       "      <td>100</td>\n",
       "      <td>123</td>\n",
       "      <td>122</td>\n",
       "      <td>120</td>\n",
       "      <td>80</td>\n",
       "      <td>625</td>\n",
       "      <td>Grass/Poison</td>\n",
       "      <td>0.560000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Charmander</td>\n",
       "      <td>Fire</td>\n",
       "      <td>None</td>\n",
       "      <td>39</td>\n",
       "      <td>52</td>\n",
       "      <td>43</td>\n",
       "      <td>60</td>\n",
       "      <td>50</td>\n",
       "      <td>65</td>\n",
       "      <td>309</td>\n",
       "      <td>Fire/None</td>\n",
       "      <td>0.491071</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   #           Name Type 1  Type 2  HP  Attack  Defense  Sp. Atk  Sp. Def  \\\n",
       "0  1      Bulbasaur  Grass  Poison  45      49       49       65       65   \n",
       "1  2        Ivysaur  Grass  Poison  60      62       63       80       80   \n",
       "2  3       Venusaur  Grass  Poison  80      82       83      100      100   \n",
       "3  4  Mega Venusaur  Grass  Poison  80     100      123      122      120   \n",
       "4  5     Charmander   Fire    None  39      52       43       60       50   \n",
       "\n",
       "   Speed  stats_sum          Type     ratio  \n",
       "0     45        318  Grass/Poison  0.278195  \n",
       "1     60        405  Grass/Poison  0.380165  \n",
       "2     80        525  Grass/Poison  0.674242  \n",
       "3     80        625  Grass/Poison  0.560000  \n",
       "4     65        309     Fire/None  0.491071  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "names_dict = dict(zip(pokemon['#'], pokemon['Name']))\n",
    "cols = ['First_pokemon','Second_pokemon','Winner']\n",
    "combats_name = combats[cols].replace(names_dict)\n",
    "\n",
    "first_battle = combats_name['First_pokemon'].value_counts()\n",
    "second_battle = combats_name['Second_pokemon'].value_counts()\n",
    "win_counts = combats_name['Winner'].value_counts()\n",
    "battle_num = first_battle + second_battle\n",
    "battle_win = pd.DataFrame({'battle': battle_num, 'win': win_counts}, columns=['battle', 'win'])\n",
    "battle_win[\"ratio\"] = battle_win['win']/battle_win['battle']\n",
    "\n",
    "battle_win['win'] = battle_win['win'].fillna(0)\n",
    "battle_win['ratio'] = battle_win['ratio'].fillna(0)\n",
    "battle_win.loc[['Shuckle']]\n",
    "\n",
    "id_dict = dict(zip(pokemon['Name'], pokemon['#']))\n",
    "battle_win['Name'] = battle_win.index\n",
    "battle_win['#'] = battle_win['Name'].replace(id_dict)\n",
    "ratio_dict = dict(zip(battle_win['#'], battle_win['ratio']))\n",
    "pokemon['ratio'] = pokemon['#'].replace(ratio_dict)\n",
    "pokemon.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# type chart\n",
    "\n",
    "Normal = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\n",
    "Fighting = {\"Normal\": 2, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 0, \"Steel\": 2, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\n",
    "Poison = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 0.5, \"Flying\": 1, \"Bug\": 1, \"Rock\": 0.5, \"Ghost\": 0.5, \"Steel\": 0, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 2}\n",
    "Ground = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 2, \"Ground\": 1, \"Flying\": 0, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 2, \"Water\": 1, \"Electric\": 2, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\n",
    "Flying = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 0.5, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\":1}\n",
    "Bug = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 0.5, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 0.5, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 2, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 2, \"Fairy\": 0.5}\n",
    "Rock = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 0.5, \"Flying\": 2, \"Bug\": 2, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 2, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 1}\n",
    "Ghost = {\"Normal\": 0, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 1}\n",
    "Steel = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 0.5, \"Grass\": 1, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 1, \"Dark\": 1, \"Fairy\": 2}\n",
    "Fire = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 2, \"Rock\": 0.5, \"Ghost\": 1, \"Steel\": 2, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 2, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\n",
    "Water = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 1, \"Bug\": 1, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 2, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\n",
    "Electric = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 0, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 1, \"Fire\": 1, \"Water\": 2, \"Electric\": 0.5, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\n",
    "Grass = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 0.5, \"Ground\": 2, \"Flying\": 0.5, \"Bug\": 0.5, \"Rock\": 2, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 2, \"Electric\": 1, \"Grass\": 0.5, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 0.5, \"Dark\": 1, \"Fairy\": 1}\n",
    "Ice = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 2, \"Flying\": 2, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 0.5, \"Electric\": 1, \"Grass\": 2, \"Ice\": 0.5, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 1}\n",
    "Psychic = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 2, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 0.5, \"Dragon\": 1, \"Dark\": 0, \"Fairy\": 1}\n",
    "Dragon = {\"Normal\": 1, \"Fighting\": 1, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 1, \"Fairy\": 0}\n",
    "Dark = {\"Normal\": 1, \"Fighting\": 0.5, \"Poison\": 1, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 2, \"Steel\": 1, \"Fire\": 1, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 2, \"Dragon\": 1, \"Dark\": 0.5, \"Fairy\": 0.5}\n",
    "Fairy = {\"Normal\": 1, \"Fighting\": 2, \"Poison\": 0.5, \"Ground\": 1, \"Flying\": 1, \"Bug\": 1, \"Rock\": 1, \"Ghost\": 1, \"Steel\": 0.5, \"Fire\": 0.5, \"Water\": 1, \"Electric\": 1, \"Grass\": 1, \"Ice\": 1, \"Psychic\": 1, \"Dragon\": 2, \"Dark\": 2, \"Fairy\": 1}\n",
    "\n",
    "type_relation = {\"Normal\": Normal, \"Fighting\": Fighting, \"Poison\": Poison, \"Ground\": Ground, \"Flying\": Flying, \"Bug\": Bug, \"Rock\": Rock, \"Ghost\": Ghost, \"Steel\": Steel, \"Fire\": Fire, \"Water\": Water, \"Electric\": Electric, \"Grass\": Grass, \"Ice\": Ice, \"Psychic\": Psychic, \"Dragon\": Dragon, \"Dark\": Dark, \"Fairy\": Fairy}\n",
    "df_type_relation = pd.DataFrame(type_relation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>First_pokemon_hp</th>\n",
       "      <th>First_pokemon_attack</th>\n",
       "      <th>First_pokemon_defense</th>\n",
       "      <th>First_pokemon_spattack</th>\n",
       "      <th>First_pokemon_spdefense</th>\n",
       "      <th>First_pokemon_speed</th>\n",
       "      <th>First_pokemon_stats</th>\n",
       "      <th>First_pokemon_ratio</th>\n",
       "      <th>Second_pokemon_hp</th>\n",
       "      <th>Second_pokemon_attack</th>\n",
       "      <th>Second_pokemon_defense</th>\n",
       "      <th>Second_pokemon_spattack</th>\n",
       "      <th>Second_pokemon_spdefense</th>\n",
       "      <th>Second_pokemon_speed</th>\n",
       "      <th>Second_pokemon_stats</th>\n",
       "      <th>Second_pokemon_ratio</th>\n",
       "      <th>Relation</th>\n",
       "      <th>First_win</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>50</td>\n",
       "      <td>64</td>\n",
       "      <td>50</td>\n",
       "      <td>45</td>\n",
       "      <td>50</td>\n",
       "      <td>41</td>\n",
       "      <td>300</td>\n",
       "      <td>0.227273</td>\n",
       "      <td>70</td>\n",
       "      <td>70</td>\n",
       "      <td>40</td>\n",
       "      <td>60</td>\n",
       "      <td>40</td>\n",
       "      <td>60</td>\n",
       "      <td>340</td>\n",
       "      <td>0.424779</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>91</td>\n",
       "      <td>90</td>\n",
       "      <td>72</td>\n",
       "      <td>90</td>\n",
       "      <td>129</td>\n",
       "      <td>108</td>\n",
       "      <td>580</td>\n",
       "      <td>0.896000</td>\n",
       "      <td>91</td>\n",
       "      <td>129</td>\n",
       "      <td>90</td>\n",
       "      <td>72</td>\n",
       "      <td>90</td>\n",
       "      <td>108</td>\n",
       "      <td>580</td>\n",
       "      <td>0.853659</td>\n",
       "      <td>3.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>55</td>\n",
       "      <td>40</td>\n",
       "      <td>85</td>\n",
       "      <td>80</td>\n",
       "      <td>105</td>\n",
       "      <td>40</td>\n",
       "      <td>405</td>\n",
       "      <td>0.236220</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>75</td>\n",
       "      <td>125</td>\n",
       "      <td>95</td>\n",
       "      <td>40</td>\n",
       "      <td>485</td>\n",
       "      <td>0.156716</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>40</td>\n",
       "      <td>70</td>\n",
       "      <td>40</td>\n",
       "      <td>20</td>\n",
       "      <td>250</td>\n",
       "      <td>0.032520</td>\n",
       "      <td>77</td>\n",
       "      <td>120</td>\n",
       "      <td>90</td>\n",
       "      <td>60</td>\n",
       "      <td>90</td>\n",
       "      <td>48</td>\n",
       "      <td>485</td>\n",
       "      <td>0.278571</td>\n",
       "      <td>-0.5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>70</td>\n",
       "      <td>60</td>\n",
       "      <td>125</td>\n",
       "      <td>115</td>\n",
       "      <td>70</td>\n",
       "      <td>55</td>\n",
       "      <td>495</td>\n",
       "      <td>0.355072</td>\n",
       "      <td>20</td>\n",
       "      <td>10</td>\n",
       "      <td>230</td>\n",
       "      <td>10</td>\n",
       "      <td>230</td>\n",
       "      <td>5</td>\n",
       "      <td>505</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   First_pokemon_hp  First_pokemon_attack  First_pokemon_defense  \\\n",
       "0                50                    64                     50   \n",
       "1                91                    90                     72   \n",
       "2                55                    40                     85   \n",
       "3                40                    40                     40   \n",
       "4                70                    60                    125   \n",
       "\n",
       "   First_pokemon_spattack  First_pokemon_spdefense  First_pokemon_speed  \\\n",
       "0                      45                       50                   41   \n",
       "1                      90                      129                  108   \n",
       "2                      80                      105                   40   \n",
       "3                      70                       40                   20   \n",
       "4                     115                       70                   55   \n",
       "\n",
       "   First_pokemon_stats  First_pokemon_ratio  Second_pokemon_hp  \\\n",
       "0                  300             0.227273                 70   \n",
       "1                  580             0.896000                 91   \n",
       "2                  405             0.236220                 75   \n",
       "3                  250             0.032520                 77   \n",
       "4                  495             0.355072                 20   \n",
       "\n",
       "   Second_pokemon_attack  Second_pokemon_defense  Second_pokemon_spattack  \\\n",
       "0                     70                      40                       60   \n",
       "1                    129                      90                       72   \n",
       "2                     75                      75                      125   \n",
       "3                    120                      90                       60   \n",
       "4                     10                     230                       10   \n",
       "\n",
       "   Second_pokemon_spdefense  Second_pokemon_speed  Second_pokemon_stats  \\\n",
       "0                        40                    60                   340   \n",
       "1                        90                   108                   580   \n",
       "2                        95                    40                   485   \n",
       "3                        90                    48                   485   \n",
       "4                       230                     5                   505   \n",
       "\n",
       "   Second_pokemon_ratio  Relation  First_win  \n",
       "0              0.424779      -3.5          0  \n",
       "1              0.853659       3.5          0  \n",
       "2              0.156716       0.0          0  \n",
       "3              0.278571      -0.5          0  \n",
       "4              0.000000       3.0          1  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "combats_add_data = combats.copy()\n",
    "type_dict = dict(zip(pokemon['#'], pokemon['Type']))\n",
    "hp_dict = dict(zip(pokemon['#'], pokemon['HP']))\n",
    "attack_dict = dict(zip(pokemon['#'], pokemon['Attack']))\n",
    "defense_dict = dict(zip(pokemon['#'], pokemon['Defense']))\n",
    "spattack_dict = dict(zip(pokemon['#'], pokemon['Sp. Atk']))\n",
    "spdefense_dict = dict(zip(pokemon['#'], pokemon['Sp. Def']))\n",
    "speed_dict = dict(zip(pokemon['#'], pokemon['Speed']))\n",
    "stats_sum_dict = dict(zip(pokemon['#'], pokemon['stats_sum']))\n",
    "ratio_dict = dict(zip(pokemon['#'], pokemon['ratio']))\n",
    "combats_add_data['First_pokemon_type'] = combats_add_data['First_pokemon'].replace(type_dict)\n",
    "combats_add_data['First_pokemon_hp'] = combats_add_data['First_pokemon'].replace(hp_dict)\n",
    "combats_add_data['First_pokemon_attack'] = combats_add_data['First_pokemon'].replace(attack_dict)\n",
    "combats_add_data['First_pokemon_defense'] = combats_add_data['First_pokemon'].replace(defense_dict)\n",
    "combats_add_data['First_pokemon_spattack'] = combats_add_data['First_pokemon'].replace(spattack_dict)\n",
    "combats_add_data['First_pokemon_spdefense'] = combats_add_data['First_pokemon'].replace(spdefense_dict)\n",
    "combats_add_data['First_pokemon_speed'] = combats_add_data['First_pokemon'].replace(speed_dict)\n",
    "combats_add_data['First_pokemon_stats'] = combats_add_data['First_pokemon'].replace(stats_sum_dict)\n",
    "combats_add_data['First_pokemon_ratio'] = combats_add_data['First_pokemon'].replace(ratio_dict)\n",
    "combats_add_data['Second_pokemon_type'] = combats_add_data['Second_pokemon'].replace(type_dict)\n",
    "combats_add_data['Second_pokemon_hp'] = combats_add_data['Second_pokemon'].replace(hp_dict)\n",
    "combats_add_data['Second_pokemon_attack'] = combats_add_data['Second_pokemon'].replace(attack_dict)\n",
    "combats_add_data['Second_pokemon_defense'] = combats_add_data['Second_pokemon'].replace(defense_dict)\n",
    "combats_add_data['Second_pokemon_spattack'] = combats_add_data['Second_pokemon'].replace(spattack_dict)\n",
    "combats_add_data['Second_pokemon_spdefense'] = combats_add_data['Second_pokemon'].replace(spdefense_dict)\n",
    "combats_add_data['Second_pokemon_speed'] = combats_add_data['Second_pokemon'].replace(speed_dict)\n",
    "combats_add_data['Second_pokemon_stats'] = combats_add_data['Second_pokemon'].replace(stats_sum_dict)\n",
    "combats_add_data['Second_pokemon_ratio'] = combats_add_data['Second_pokemon'].replace(ratio_dict)\n",
    "\n",
    "zero_dict = {0: 0.25}\n",
    "df_type_relation = df_type_relation[:].replace(zero_dict)\n",
    "\n",
    "def calcTypeRelation(combats_add_data):\n",
    "    r0 = 1\n",
    "    first_type1 = combats_add_data[\"First_pokemon_type\"].split(\"/\")[0]\n",
    "    first_type2 = combats_add_data[\"First_pokemon_type\"].split(\"/\")[1]\n",
    "    second_type1 = combats_add_data[\"Second_pokemon_type\"].split(\"/\")[0]\n",
    "    second_type2 = combats_add_data[\"Second_pokemon_type\"].split(\"/\")[1]\n",
    "    if first_type2 != \"None\" and second_type2 != \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r2 = df_type_relation[first_type1][second_type2]\n",
    "        r3 = df_type_relation[first_type2][second_type1]\n",
    "        r4 = df_type_relation[first_type2][second_type2]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r6 = df_type_relation[second_type1][first_type2]\n",
    "        r7 = df_type_relation[second_type2][first_type1]\n",
    "        r8 = df_type_relation[second_type2][first_type2]\n",
    "        r = r0 * r1 * r2 * r3 * r4 - r0 * r5 * r6 * r7 * r8\n",
    "    elif first_type2 != \"None\" and second_type2 == \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r3 = df_type_relation[first_type2][second_type1]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r6 = df_type_relation[second_type1][first_type2] \n",
    "        r = r0 * r1 * r3 - r0 * r5 *r6\n",
    "    elif first_type2 == \"None\" and second_type2 != \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r2 = df_type_relation[first_type1][second_type2]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r7 = df_type_relation[second_type2][first_type1]\n",
    "        r = r0 * r1 * r2 - r0 * r5 * r7\n",
    "    elif first_type2 == \"None\" and second_type2 == \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r = r0 * r1 - r0 * r5\n",
    "    return r\n",
    "\n",
    "combats_add_data['Relation'] = combats_add_data.apply(lambda x: calcTypeRelation(x), axis = 1)\n",
    "combats_add_data['First_win'] = combats_add_data.apply(lambda x: 1 if x['First_pokemon']==x['Winner'] else 0, axis=1)\n",
    "combats_add_data = combats_add_data.drop(['First_pokemon','Second_pokemon','Winner','First_pokemon_type','Second_pokemon_type'], axis = 1)\n",
    "combats_add_data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "combats_add_data['First_pokemon_ra'] = combats_add_data['First_pokemon_attack'] / combats_add_data['First_pokemon_spattack']\n",
    "combats_add_data['Second_pokemon_ra'] = combats_add_data['Second_pokemon_attack'] / combats_add_data['Second_pokemon_spattack']\n",
    "\n",
    "combats_attack = combats_add_data.loc[combats_add_data['First_pokemon_ra'] >= 1.5]\n",
    "#combats_attack_attack\n",
    "combats_attack_attack = combats_attack.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_attack_attack = combats_attack_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_attack_balance\n",
    "combats_attack_balance = combats_attack.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_attack_balance = combats_attack_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_attack_balance = combats_attack_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_attack_spattack\n",
    "combats_attack_spattack = combats_attack.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_attack_spattack = combats_attack_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "\n",
    "combats_balance = combats_add_data.loc[combats_add_data['First_pokemon_ra'] < 1.5]\n",
    "combats_balance = combats_balance.loc[combats_add_data['First_pokemon_ra'] > 0.666667]\n",
    "#combats_balance_attack\n",
    "combats_balance_attack = combats_balance.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_balance_attack = combats_balance_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_balance_balance\n",
    "combats_balance_balance = combats_balance.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_balance_balance = combats_balance_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_balance_balance = combats_balance_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_balance_spattack\n",
    "combats_balance_spattack = combats_balance.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_balance_spattack = combats_balance_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "\n",
    "combats_spattack = combats_add_data.loc[combats_add_data['First_pokemon_ra'] <= 0.666667]\n",
    "#combats_spattack_attack\n",
    "combats_spattack_attack = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_spattack_attack = combats_spattack_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_spattack_balance\n",
    "combats_spattack_balance = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_spattack_balance = combats_spattack_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_spattack_balance = combats_spattack_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_spattack_spattack\n",
    "combats_spattack_spattack = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_spattack_spattack = combats_spattack_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#standardization\n",
    "combats_attack_attack['First_pokemon_hp'] = (combats_attack_attack['First_pokemon_hp'] - combats_attack_attack['First_pokemon_hp'].mean()) / combats_attack_attack['First_pokemon_hp'].std()\n",
    "combats_attack_attack['First_pokemon_attack'] = (combats_attack_attack['First_pokemon_attack'] - combats_attack_attack['First_pokemon_attack'].mean()) / combats_attack_attack['First_pokemon_attack'].std()\n",
    "combats_attack_attack['First_pokemon_defense'] = (combats_attack_attack['First_pokemon_defense'] - combats_attack_attack['First_pokemon_defense'].mean()) / combats_attack_attack['First_pokemon_defense'].std()\n",
    "combats_attack_attack['First_pokemon_spattack'] = (combats_attack_attack['First_pokemon_spattack'] - combats_attack_attack['First_pokemon_spattack'].mean()) / combats_attack_attack['First_pokemon_spattack'].std()\n",
    "combats_attack_attack['First_pokemon_spdefense'] = (combats_attack_attack['First_pokemon_spdefense'] - combats_attack_attack['First_pokemon_spdefense'].mean()) / combats_attack_attack['First_pokemon_spdefense'].std()\n",
    "combats_attack_attack['First_pokemon_speed'] = (combats_attack_attack['First_pokemon_speed'] - combats_attack_attack['First_pokemon_speed'].mean()) / combats_attack_attack['First_pokemon_speed'].std()\n",
    "combats_attack_attack['First_pokemon_stats'] = (combats_attack_attack['First_pokemon_stats'] - combats_attack_attack['First_pokemon_stats'].mean()) / combats_attack_attack['First_pokemon_stats'].std()\n",
    "combats_attack_attack['Second_pokemon_hp'] = (combats_attack_attack['Second_pokemon_hp'] - combats_attack_attack['Second_pokemon_hp'].mean()) / combats_attack_attack['Second_pokemon_hp'].std()\n",
    "combats_attack_attack['Second_pokemon_attack'] = (combats_attack_attack['Second_pokemon_attack'] - combats_attack_attack['Second_pokemon_attack'].mean()) / combats_attack_attack['Second_pokemon_attack'].std()\n",
    "combats_attack_attack['Second_pokemon_defense'] = (combats_attack_attack['Second_pokemon_defense'] - combats_attack_attack['Second_pokemon_defense'].mean()) / combats_attack_attack['Second_pokemon_defense'].std()\n",
    "combats_attack_attack['Second_pokemon_spattack'] = (combats_attack_attack['Second_pokemon_spattack'] - combats_attack_attack['Second_pokemon_spattack'].mean()) / combats_attack_attack['Second_pokemon_spattack'].std()\n",
    "combats_attack_attack['Second_pokemon_spdefense'] = (combats_attack_attack['Second_pokemon_spdefense'] - combats_attack_attack['Second_pokemon_spdefense'].mean()) / combats_attack_attack['Second_pokemon_spdefense'].std()\n",
    "combats_attack_attack['Second_pokemon_speed'] = (combats_attack_attack['Second_pokemon_speed'] - combats_attack_attack['Second_pokemon_speed'].mean()) / combats_attack_attack['Second_pokemon_speed'].std()\n",
    "combats_attack_attack['Second_pokemon_stats'] = (combats_attack_attack['Second_pokemon_stats'] - combats_attack_attack['Second_pokemon_stats'].mean()) / combats_attack_attack['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_attack_balance['First_pokemon_hp'] = (combats_attack_balance['First_pokemon_hp'] - combats_attack_balance['First_pokemon_hp'].mean()) / combats_attack_balance['First_pokemon_hp'].std()\n",
    "combats_attack_balance['First_pokemon_attack'] = (combats_attack_balance['First_pokemon_attack'] - combats_attack_balance['First_pokemon_attack'].mean()) / combats_attack_balance['First_pokemon_attack'].std()\n",
    "combats_attack_balance['First_pokemon_defense'] = (combats_attack_balance['First_pokemon_defense'] - combats_attack_balance['First_pokemon_defense'].mean()) / combats_attack_balance['First_pokemon_defense'].std()\n",
    "combats_attack_balance['First_pokemon_spattack'] = (combats_attack_balance['First_pokemon_spattack'] - combats_attack_balance['First_pokemon_spattack'].mean()) / combats_attack_balance['First_pokemon_spattack'].std()\n",
    "combats_attack_balance['First_pokemon_spdefense'] = (combats_attack_balance['First_pokemon_spdefense'] - combats_attack_balance['First_pokemon_spdefense'].mean()) / combats_attack_balance['First_pokemon_spdefense'].std()\n",
    "combats_attack_balance['First_pokemon_speed'] = (combats_attack_balance['First_pokemon_speed'] - combats_attack_balance['First_pokemon_speed'].mean()) / combats_attack_balance['First_pokemon_speed'].std()\n",
    "combats_attack_balance['First_pokemon_stats'] = (combats_attack_balance['First_pokemon_stats'] - combats_attack_balance['First_pokemon_stats'].mean()) / combats_attack_balance['First_pokemon_stats'].std()\n",
    "combats_attack_balance['Second_pokemon_hp'] = (combats_attack_balance['Second_pokemon_hp'] - combats_attack_balance['Second_pokemon_hp'].mean()) / combats_attack_balance['Second_pokemon_hp'].std()\n",
    "combats_attack_balance['Second_pokemon_attack'] = (combats_attack_balance['Second_pokemon_attack'] - combats_attack_balance['Second_pokemon_attack'].mean()) / combats_attack_balance['Second_pokemon_attack'].std()\n",
    "combats_attack_balance['Second_pokemon_defense'] = (combats_attack_balance['Second_pokemon_defense'] - combats_attack_balance['Second_pokemon_defense'].mean()) / combats_attack_balance['Second_pokemon_defense'].std()\n",
    "combats_attack_balance['Second_pokemon_spattack'] = (combats_attack_balance['Second_pokemon_spattack'] - combats_attack_balance['Second_pokemon_spattack'].mean()) / combats_attack_balance['Second_pokemon_spattack'].std()\n",
    "combats_attack_balance['Second_pokemon_spdefense'] = (combats_attack_balance['Second_pokemon_spdefense'] - combats_attack_balance['Second_pokemon_spdefense'].mean()) / combats_attack_balance['Second_pokemon_spdefense'].std()\n",
    "combats_attack_balance['Second_pokemon_speed'] = (combats_attack_balance['Second_pokemon_speed'] - combats_attack_balance['Second_pokemon_speed'].mean()) / combats_attack_balance['Second_pokemon_speed'].std()\n",
    "combats_attack_balance['Second_pokemon_stats'] = (combats_attack_balance['Second_pokemon_stats'] - combats_attack_balance['Second_pokemon_stats'].mean()) / combats_attack_balance['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_attack_spattack['First_pokemon_hp'] = (combats_attack_spattack['First_pokemon_hp'] - combats_attack_spattack['First_pokemon_hp'].mean()) / combats_attack_spattack['First_pokemon_hp'].std()\n",
    "combats_attack_spattack['First_pokemon_attack'] = (combats_attack_spattack['First_pokemon_attack'] - combats_attack_spattack['First_pokemon_attack'].mean()) / combats_attack_spattack['First_pokemon_attack'].std()\n",
    "combats_attack_spattack['First_pokemon_defense'] = (combats_attack_spattack['First_pokemon_defense'] - combats_attack_spattack['First_pokemon_defense'].mean()) / combats_attack_spattack['First_pokemon_defense'].std()\n",
    "combats_attack_spattack['First_pokemon_spattack'] = (combats_attack_spattack['First_pokemon_spattack'] - combats_attack_spattack['First_pokemon_spattack'].mean()) / combats_attack_spattack['First_pokemon_spattack'].std()\n",
    "combats_attack_spattack['First_pokemon_spdefense'] = (combats_attack_spattack['First_pokemon_spdefense'] - combats_attack_spattack['First_pokemon_spdefense'].mean()) / combats_attack_spattack['First_pokemon_spdefense'].std()\n",
    "combats_attack_spattack['First_pokemon_speed'] = (combats_attack_spattack['First_pokemon_speed'] - combats_attack_spattack['First_pokemon_speed'].mean()) / combats_attack_spattack['First_pokemon_speed'].std()\n",
    "combats_attack_spattack['First_pokemon_stats'] = (combats_attack_spattack['First_pokemon_stats'] - combats_attack_spattack['First_pokemon_stats'].mean()) / combats_attack_spattack['First_pokemon_stats'].std()\n",
    "combats_attack_spattack['Second_pokemon_hp'] = (combats_attack_spattack['Second_pokemon_hp'] - combats_attack_spattack['Second_pokemon_hp'].mean()) / combats_attack_spattack['Second_pokemon_hp'].std()\n",
    "combats_attack_spattack['Second_pokemon_attack'] = (combats_attack_spattack['Second_pokemon_attack'] - combats_attack_spattack['Second_pokemon_attack'].mean()) / combats_attack_spattack['Second_pokemon_attack'].std()\n",
    "combats_attack_spattack['Second_pokemon_defense'] = (combats_attack_spattack['Second_pokemon_defense'] - combats_attack_spattack['Second_pokemon_defense'].mean()) / combats_attack_spattack['Second_pokemon_defense'].std()\n",
    "combats_attack_spattack['Second_pokemon_spattack'] = (combats_attack_spattack['Second_pokemon_spattack'] - combats_attack_spattack['Second_pokemon_spattack'].mean()) / combats_attack_spattack['Second_pokemon_spattack'].std()\n",
    "combats_attack_spattack['Second_pokemon_spdefense'] = (combats_attack_spattack['Second_pokemon_spdefense'] - combats_attack_spattack['Second_pokemon_spdefense'].mean()) / combats_attack_spattack['Second_pokemon_spdefense'].std()\n",
    "combats_attack_spattack['Second_pokemon_speed'] = (combats_attack_spattack['Second_pokemon_speed'] - combats_attack_spattack['Second_pokemon_speed'].mean()) / combats_attack_spattack['Second_pokemon_speed'].std()\n",
    "combats_attack_spattack['Second_pokemon_stats'] = (combats_attack_spattack['Second_pokemon_stats'] - combats_attack_spattack['Second_pokemon_stats'].mean()) / combats_attack_spattack['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_balance_attack['First_pokemon_hp'] = (combats_balance_attack['First_pokemon_hp'] - combats_balance_attack['First_pokemon_hp'].mean()) / combats_balance_attack['First_pokemon_hp'].std()\n",
    "combats_balance_attack['First_pokemon_attack'] = (combats_balance_attack['First_pokemon_attack'] - combats_balance_attack['First_pokemon_attack'].mean()) / combats_balance_attack['First_pokemon_attack'].std()\n",
    "combats_balance_attack['First_pokemon_defense'] = (combats_balance_attack['First_pokemon_defense'] - combats_balance_attack['First_pokemon_defense'].mean()) / combats_balance_attack['First_pokemon_defense'].std()\n",
    "combats_balance_attack['First_pokemon_spattack'] = (combats_balance_attack['First_pokemon_spattack'] - combats_balance_attack['First_pokemon_spattack'].mean()) / combats_balance_attack['First_pokemon_spattack'].std()\n",
    "combats_balance_attack['First_pokemon_spdefense'] = (combats_balance_attack['First_pokemon_spdefense'] - combats_balance_attack['First_pokemon_spdefense'].mean()) / combats_balance_attack['First_pokemon_spdefense'].std()\n",
    "combats_balance_attack['First_pokemon_speed'] = (combats_balance_attack['First_pokemon_speed'] - combats_balance_attack['First_pokemon_speed'].mean()) / combats_balance_attack['First_pokemon_speed'].std()\n",
    "combats_balance_attack['First_pokemon_stats'] = (combats_balance_attack['First_pokemon_stats'] - combats_balance_attack['First_pokemon_stats'].mean()) / combats_balance_attack['First_pokemon_stats'].std()\n",
    "combats_balance_attack['Second_pokemon_hp'] = (combats_balance_attack['Second_pokemon_hp'] - combats_balance_attack['Second_pokemon_hp'].mean()) / combats_balance_attack['Second_pokemon_hp'].std()\n",
    "combats_balance_attack['Second_pokemon_attack'] = (combats_balance_attack['Second_pokemon_attack'] - combats_balance_attack['Second_pokemon_attack'].mean()) / combats_balance_attack['Second_pokemon_attack'].std()\n",
    "combats_balance_attack['Second_pokemon_defense'] = (combats_balance_attack['Second_pokemon_defense'] - combats_balance_attack['Second_pokemon_defense'].mean()) / combats_balance_attack['Second_pokemon_defense'].std()\n",
    "combats_balance_attack['Second_pokemon_spattack'] = (combats_balance_attack['Second_pokemon_spattack'] - combats_balance_attack['Second_pokemon_spattack'].mean()) / combats_balance_attack['Second_pokemon_spattack'].std()\n",
    "combats_balance_attack['Second_pokemon_spdefense'] = (combats_balance_attack['Second_pokemon_spdefense'] - combats_balance_attack['Second_pokemon_spdefense'].mean()) / combats_balance_attack['Second_pokemon_spdefense'].std()\n",
    "combats_balance_attack['Second_pokemon_speed'] = (combats_balance_attack['Second_pokemon_speed'] - combats_balance_attack['Second_pokemon_speed'].mean()) / combats_balance_attack['Second_pokemon_speed'].std()\n",
    "combats_balance_attack['Second_pokemon_stats'] = (combats_balance_attack['Second_pokemon_stats'] - combats_balance_attack['Second_pokemon_stats'].mean()) / combats_balance_attack['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_balance_balance['First_pokemon_hp'] = (combats_balance_balance['First_pokemon_hp'] - combats_balance_balance['First_pokemon_hp'].mean()) / combats_balance_balance['First_pokemon_hp'].std()\n",
    "combats_balance_balance['First_pokemon_attack'] = (combats_balance_balance['First_pokemon_attack'] - combats_balance_balance['First_pokemon_attack'].mean()) / combats_balance_balance['First_pokemon_attack'].std()\n",
    "combats_balance_balance['First_pokemon_defense'] = (combats_balance_balance['First_pokemon_defense'] - combats_balance_balance['First_pokemon_defense'].mean()) / combats_balance_balance['First_pokemon_defense'].std()\n",
    "combats_balance_balance['First_pokemon_spattack'] = (combats_balance_balance['First_pokemon_spattack'] - combats_balance_balance['First_pokemon_spattack'].mean()) / combats_balance_balance['First_pokemon_spattack'].std()\n",
    "combats_balance_balance['First_pokemon_spdefense'] = (combats_balance_balance['First_pokemon_spdefense'] - combats_balance_balance['First_pokemon_spdefense'].mean()) / combats_balance_balance['First_pokemon_spdefense'].std()\n",
    "combats_balance_balance['First_pokemon_speed'] = (combats_balance_balance['First_pokemon_speed'] - combats_balance_balance['First_pokemon_speed'].mean()) / combats_balance_balance['First_pokemon_speed'].std()\n",
    "combats_balance_balance['First_pokemon_stats'] = (combats_balance_balance['First_pokemon_stats'] - combats_balance_balance['First_pokemon_stats'].mean()) / combats_balance_balance['First_pokemon_stats'].std()\n",
    "combats_balance_balance['Second_pokemon_hp'] = (combats_balance_balance['Second_pokemon_hp'] - combats_balance_balance['Second_pokemon_hp'].mean()) / combats_balance_balance['Second_pokemon_hp'].std()\n",
    "combats_balance_balance['Second_pokemon_attack'] = (combats_balance_balance['Second_pokemon_attack'] - combats_balance_balance['Second_pokemon_attack'].mean()) / combats_balance_balance['Second_pokemon_attack'].std()\n",
    "combats_balance_balance['Second_pokemon_defense'] = (combats_balance_balance['Second_pokemon_defense'] - combats_balance_balance['Second_pokemon_defense'].mean()) / combats_balance_balance['Second_pokemon_defense'].std()\n",
    "combats_balance_balance['Second_pokemon_spattack'] = (combats_balance_balance['Second_pokemon_spattack'] - combats_balance_balance['Second_pokemon_spattack'].mean()) / combats_balance_balance['Second_pokemon_spattack'].std()\n",
    "combats_balance_balance['Second_pokemon_spdefense'] = (combats_balance_balance['Second_pokemon_spdefense'] - combats_balance_balance['Second_pokemon_spdefense'].mean()) / combats_balance_balance['Second_pokemon_spdefense'].std()\n",
    "combats_balance_balance['Second_pokemon_speed'] = (combats_balance_balance['Second_pokemon_speed'] - combats_balance_balance['Second_pokemon_speed'].mean()) / combats_balance_balance['Second_pokemon_speed'].std()\n",
    "combats_balance_balance['Second_pokemon_stats'] = (combats_balance_balance['Second_pokemon_stats'] - combats_balance_balance['Second_pokemon_stats'].mean()) / combats_balance_balance['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_balance_spattack['First_pokemon_hp'] = (combats_balance_spattack['First_pokemon_hp'] - combats_balance_spattack['First_pokemon_hp'].mean()) / combats_balance_spattack['First_pokemon_hp'].std()\n",
    "combats_balance_spattack['First_pokemon_attack'] = (combats_balance_spattack['First_pokemon_attack'] - combats_balance_spattack['First_pokemon_attack'].mean()) / combats_balance_spattack['First_pokemon_attack'].std()\n",
    "combats_balance_spattack['First_pokemon_defense'] = (combats_balance_spattack['First_pokemon_defense'] - combats_balance_spattack['First_pokemon_defense'].mean()) / combats_balance_spattack['First_pokemon_defense'].std()\n",
    "combats_balance_spattack['First_pokemon_spattack'] = (combats_balance_spattack['First_pokemon_spattack'] - combats_balance_spattack['First_pokemon_spattack'].mean()) / combats_balance_spattack['First_pokemon_spattack'].std()\n",
    "combats_balance_spattack['First_pokemon_spdefense'] = (combats_balance_spattack['First_pokemon_spdefense'] - combats_balance_spattack['First_pokemon_spdefense'].mean()) / combats_balance_spattack['First_pokemon_spdefense'].std()\n",
    "combats_balance_spattack['First_pokemon_speed'] = (combats_balance_spattack['First_pokemon_speed'] - combats_balance_spattack['First_pokemon_speed'].mean()) / combats_balance_spattack['First_pokemon_speed'].std()\n",
    "combats_balance_spattack['First_pokemon_stats'] = (combats_balance_spattack['First_pokemon_stats'] - combats_balance_spattack['First_pokemon_stats'].mean()) / combats_balance_spattack['First_pokemon_stats'].std()\n",
    "combats_balance_spattack['Second_pokemon_hp'] = (combats_balance_spattack['Second_pokemon_hp'] - combats_balance_spattack['Second_pokemon_hp'].mean()) / combats_balance_spattack['Second_pokemon_hp'].std()\n",
    "combats_balance_spattack['Second_pokemon_attack'] = (combats_balance_spattack['Second_pokemon_attack'] - combats_balance_spattack['Second_pokemon_attack'].mean()) / combats_balance_spattack['Second_pokemon_attack'].std()\n",
    "combats_balance_spattack['Second_pokemon_defense'] = (combats_balance_spattack['Second_pokemon_defense'] - combats_balance_spattack['Second_pokemon_defense'].mean()) / combats_balance_spattack['Second_pokemon_defense'].std()\n",
    "combats_balance_spattack['Second_pokemon_spattack'] = (combats_balance_spattack['Second_pokemon_spattack'] - combats_balance_spattack['Second_pokemon_spattack'].mean()) / combats_balance_spattack['Second_pokemon_spattack'].std()\n",
    "combats_balance_spattack['Second_pokemon_spdefense'] = (combats_balance_spattack['Second_pokemon_spdefense'] - combats_balance_spattack['Second_pokemon_spdefense'].mean()) / combats_balance_spattack['Second_pokemon_spdefense'].std()\n",
    "combats_balance_spattack['Second_pokemon_speed'] = (combats_balance_spattack['Second_pokemon_speed'] - combats_balance_spattack['Second_pokemon_speed'].mean()) / combats_balance_spattack['Second_pokemon_speed'].std()\n",
    "combats_balance_spattack['Second_pokemon_stats'] = (combats_balance_spattack['Second_pokemon_stats'] - combats_balance_spattack['Second_pokemon_stats'].mean()) / combats_balance_spattack['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_spattack_attack['First_pokemon_hp'] = (combats_spattack_attack['First_pokemon_hp'] - combats_spattack_attack['First_pokemon_hp'].mean()) / combats_spattack_attack['First_pokemon_hp'].std()\n",
    "combats_spattack_attack['First_pokemon_attack'] = (combats_spattack_attack['First_pokemon_attack'] - combats_spattack_attack['First_pokemon_attack'].mean()) / combats_spattack_attack['First_pokemon_attack'].std()\n",
    "combats_spattack_attack['First_pokemon_defense'] = (combats_spattack_attack['First_pokemon_defense'] - combats_spattack_attack['First_pokemon_defense'].mean()) / combats_spattack_attack['First_pokemon_defense'].std()\n",
    "combats_spattack_attack['First_pokemon_spattack'] = (combats_spattack_attack['First_pokemon_spattack'] - combats_spattack_attack['First_pokemon_spattack'].mean()) / combats_spattack_attack['First_pokemon_spattack'].std()\n",
    "combats_spattack_attack['First_pokemon_spdefense'] = (combats_spattack_attack['First_pokemon_spdefense'] - combats_spattack_attack['First_pokemon_spdefense'].mean()) / combats_spattack_attack['First_pokemon_spdefense'].std()\n",
    "combats_spattack_attack['First_pokemon_speed'] = (combats_spattack_attack['First_pokemon_speed'] - combats_spattack_attack['First_pokemon_speed'].mean()) / combats_spattack_attack['First_pokemon_speed'].std()\n",
    "combats_spattack_attack['First_pokemon_stats'] = (combats_spattack_attack['First_pokemon_stats'] - combats_spattack_attack['First_pokemon_stats'].mean()) / combats_spattack_attack['First_pokemon_stats'].std()\n",
    "combats_spattack_attack['Second_pokemon_hp'] = (combats_spattack_attack['Second_pokemon_hp'] - combats_spattack_attack['Second_pokemon_hp'].mean()) / combats_spattack_attack['Second_pokemon_hp'].std()\n",
    "combats_spattack_attack['Second_pokemon_attack'] = (combats_spattack_attack['Second_pokemon_attack'] - combats_spattack_attack['Second_pokemon_attack'].mean()) / combats_spattack_attack['Second_pokemon_attack'].std()\n",
    "combats_spattack_attack['Second_pokemon_defense'] = (combats_spattack_attack['Second_pokemon_defense'] - combats_spattack_attack['Second_pokemon_defense'].mean()) / combats_spattack_attack['Second_pokemon_defense'].std()\n",
    "combats_spattack_attack['Second_pokemon_spattack'] = (combats_spattack_attack['Second_pokemon_spattack'] - combats_spattack_attack['Second_pokemon_spattack'].mean()) / combats_spattack_attack['Second_pokemon_spattack'].std()\n",
    "combats_spattack_attack['Second_pokemon_spdefense'] = (combats_spattack_attack['Second_pokemon_spdefense'] - combats_spattack_attack['Second_pokemon_spdefense'].mean()) / combats_spattack_attack['Second_pokemon_spdefense'].std()\n",
    "combats_spattack_attack['Second_pokemon_speed'] = (combats_spattack_attack['Second_pokemon_speed'] - combats_spattack_attack['Second_pokemon_speed'].mean()) / combats_spattack_attack['Second_pokemon_speed'].std()\n",
    "combats_spattack_attack['Second_pokemon_stats'] = (combats_spattack_attack['Second_pokemon_stats'] - combats_spattack_attack['Second_pokemon_stats'].mean()) / combats_spattack_attack['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_spattack_balance['First_pokemon_hp'] = (combats_spattack_balance['First_pokemon_hp'] - combats_spattack_balance['First_pokemon_hp'].mean()) / combats_spattack_balance['First_pokemon_hp'].std()\n",
    "combats_spattack_balance['First_pokemon_attack'] = (combats_spattack_balance['First_pokemon_attack'] - combats_spattack_balance['First_pokemon_attack'].mean()) / combats_spattack_balance['First_pokemon_attack'].std()\n",
    "combats_spattack_balance['First_pokemon_defense'] = (combats_spattack_balance['First_pokemon_defense'] - combats_spattack_balance['First_pokemon_defense'].mean()) / combats_spattack_balance['First_pokemon_defense'].std()\n",
    "combats_spattack_balance['First_pokemon_spattack'] = (combats_spattack_balance['First_pokemon_spattack'] - combats_spattack_balance['First_pokemon_spattack'].mean()) / combats_spattack_balance['First_pokemon_spattack'].std()\n",
    "combats_spattack_balance['First_pokemon_spdefense'] = (combats_spattack_balance['First_pokemon_spdefense'] - combats_spattack_balance['First_pokemon_spdefense'].mean()) / combats_spattack_balance['First_pokemon_spdefense'].std()\n",
    "combats_spattack_balance['First_pokemon_speed'] = (combats_spattack_balance['First_pokemon_speed'] - combats_spattack_balance['First_pokemon_speed'].mean()) / combats_spattack_balance['First_pokemon_speed'].std()\n",
    "combats_spattack_balance['First_pokemon_stats'] = (combats_spattack_balance['First_pokemon_stats'] - combats_spattack_balance['First_pokemon_stats'].mean()) / combats_spattack_balance['First_pokemon_stats'].std()\n",
    "combats_spattack_balance['Second_pokemon_hp'] = (combats_spattack_balance['Second_pokemon_hp'] - combats_spattack_balance['Second_pokemon_hp'].mean()) / combats_spattack_balance['Second_pokemon_hp'].std()\n",
    "combats_spattack_balance['Second_pokemon_attack'] = (combats_spattack_balance['Second_pokemon_attack'] - combats_spattack_balance['Second_pokemon_attack'].mean()) / combats_spattack_balance['Second_pokemon_attack'].std()\n",
    "combats_spattack_balance['Second_pokemon_defense'] = (combats_spattack_balance['Second_pokemon_defense'] - combats_spattack_balance['Second_pokemon_defense'].mean()) / combats_spattack_balance['Second_pokemon_defense'].std()\n",
    "combats_spattack_balance['Second_pokemon_spattack'] = (combats_spattack_balance['Second_pokemon_spattack'] - combats_spattack_balance['Second_pokemon_spattack'].mean()) / combats_spattack_balance['Second_pokemon_spattack'].std()\n",
    "combats_spattack_balance['Second_pokemon_spdefense'] = (combats_spattack_balance['Second_pokemon_spdefense'] - combats_spattack_balance['Second_pokemon_spdefense'].mean()) / combats_spattack_balance['Second_pokemon_spdefense'].std()\n",
    "combats_spattack_balance['Second_pokemon_speed'] = (combats_spattack_balance['Second_pokemon_speed'] - combats_spattack_balance['Second_pokemon_speed'].mean()) / combats_spattack_balance['Second_pokemon_speed'].std()\n",
    "combats_spattack_balance['Second_pokemon_stats'] = (combats_spattack_balance['Second_pokemon_stats'] - combats_spattack_balance['Second_pokemon_stats'].mean()) / combats_spattack_balance['Second_pokemon_stats'].std()\n",
    "\n",
    "combats_spattack_spattack['First_pokemon_hp'] = (combats_spattack_spattack['First_pokemon_hp'] - combats_spattack_spattack['First_pokemon_hp'].mean()) / combats_spattack_spattack['First_pokemon_hp'].std()\n",
    "combats_spattack_spattack['First_pokemon_attack'] = (combats_spattack_spattack['First_pokemon_attack'] - combats_spattack_spattack['First_pokemon_attack'].mean()) / combats_spattack_spattack['First_pokemon_attack'].std()\n",
    "combats_spattack_spattack['First_pokemon_defense'] = (combats_spattack_spattack['First_pokemon_defense'] - combats_spattack_spattack['First_pokemon_defense'].mean()) / combats_spattack_spattack['First_pokemon_defense'].std()\n",
    "combats_spattack_spattack['First_pokemon_spattack'] = (combats_spattack_spattack['First_pokemon_spattack'] - combats_spattack_spattack['First_pokemon_spattack'].mean()) / combats_spattack_spattack['First_pokemon_spattack'].std()\n",
    "combats_spattack_spattack['First_pokemon_spdefense'] = (combats_spattack_spattack['First_pokemon_spdefense'] - combats_spattack_spattack['First_pokemon_spdefense'].mean()) / combats_spattack_spattack['First_pokemon_spdefense'].std()\n",
    "combats_spattack_spattack['First_pokemon_speed'] = (combats_spattack_spattack['First_pokemon_speed'] - combats_spattack_spattack['First_pokemon_speed'].mean()) / combats_spattack_spattack['First_pokemon_speed'].std()\n",
    "combats_spattack_spattack['First_pokemon_stats'] = (combats_spattack_spattack['First_pokemon_stats'] - combats_spattack_spattack['First_pokemon_stats'].mean()) / combats_spattack_spattack['First_pokemon_stats'].std()\n",
    "combats_spattack_spattack['Second_pokemon_hp'] = (combats_spattack_spattack['Second_pokemon_hp'] - combats_spattack_spattack['Second_pokemon_hp'].mean()) / combats_spattack_spattack['Second_pokemon_hp'].std()\n",
    "combats_spattack_spattack['Second_pokemon_attack'] = (combats_spattack_spattack['Second_pokemon_attack'] - combats_spattack_spattack['Second_pokemon_attack'].mean()) / combats_spattack_spattack['Second_pokemon_attack'].std()\n",
    "combats_spattack_spattack['Second_pokemon_defense'] = (combats_spattack_spattack['Second_pokemon_defense'] - combats_spattack_spattack['Second_pokemon_defense'].mean()) / combats_spattack_spattack['Second_pokemon_defense'].std()\n",
    "combats_spattack_spattack['Second_pokemon_spattack'] = (combats_spattack_spattack['Second_pokemon_spattack'] - combats_spattack_spattack['Second_pokemon_spattack'].mean()) / combats_spattack_spattack['Second_pokemon_spattack'].std()\n",
    "combats_spattack_spattack['Second_pokemon_spdefense'] = (combats_spattack_spattack['Second_pokemon_spdefense'] - combats_spattack_spattack['Second_pokemon_spdefense'].mean()) / combats_spattack_spattack['Second_pokemon_spdefense'].std()\n",
    "combats_spattack_spattack['Second_pokemon_speed'] = (combats_spattack_spattack['Second_pokemon_speed'] - combats_spattack_spattack['Second_pokemon_speed'].mean()) / combats_spattack_spattack['Second_pokemon_speed'].std()\n",
    "combats_spattack_spattack['Second_pokemon_stats'] = (combats_spattack_spattack['Second_pokemon_stats'] - combats_spattack_spattack['Second_pokemon_stats'].mean()) / combats_spattack_spattack['Second_pokemon_stats'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n",
      "C:\\Anaconda3\\lib\\site-packages\\sklearn\\model_selection\\_split.py:2026: FutureWarning: From version 0.21, test_size will always complement train_size unless both are specified.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "RandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n",
       "            max_depth=None, max_features='auto', max_leaf_nodes=None,\n",
       "            min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "            min_samples_leaf=1, min_samples_split=2,\n",
       "            min_weight_fraction_leaf=0.0, n_estimators=100, n_jobs=1,\n",
       "            oob_score=False, random_state=None, verbose=0,\n",
       "            warm_start=False)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_aa = combats_attack_attack.drop('First_win', axis=1)\n",
    "y_aa = combats_attack_attack['First_win']\n",
    "X_train_aa, X_test_aa, y_train_aa, y_test_aa = train_test_split(X_aa, y_aa, train_size=0.8, random_state=1)\n",
    "random_forest_aa = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_aa.fit(X_train_aa, y_train_aa)\n",
    "\n",
    "X_ab = combats_attack_balance.drop('First_win', axis=1)\n",
    "y_ab = combats_attack_balance['First_win']\n",
    "X_train_ab, X_test_ab, y_train_ab, y_test_ab = train_test_split(X_ab, y_ab, train_size=0.8, random_state=1)\n",
    "random_forest_ab = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_ab.fit(X_train_ab, y_train_ab)\n",
    "\n",
    "X_as = combats_attack_spattack.drop('First_win', axis=1)\n",
    "y_as = combats_attack_spattack['First_win']\n",
    "X_train_as, X_test_as, y_train_as, y_test_as = train_test_split(X_as, y_as, train_size=0.8, random_state=1)\n",
    "random_forest_as = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_as.fit(X_train_as, y_train_as)\n",
    "\n",
    "X_ba = combats_balance_attack.drop('First_win', axis=1)\n",
    "y_ba = combats_balance_attack['First_win']\n",
    "X_train_ba, X_test_ba, y_train_ba, y_test_ba = train_test_split(X_ba, y_ba, train_size=0.8, random_state=1)\n",
    "random_forest_ba = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_ba.fit(X_train_ba, y_train_ba)\n",
    "\n",
    "X_bb = combats_balance_balance.drop('First_win', axis=1)\n",
    "y_bb = combats_balance_balance['First_win']\n",
    "X_train_bb, X_test_bb, y_train_bb, y_test_bb = train_test_split(X_bb, y_bb, train_size=0.8, random_state=1)\n",
    "random_forest_bb = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_bb.fit(X_train_bb, y_train_bb)\n",
    "\n",
    "X_bs = combats_balance_spattack.drop('First_win', axis=1)\n",
    "y_bs = combats_balance_spattack['First_win']\n",
    "X_train_bs, X_test_bs, y_train_bs, y_test_bs = train_test_split(X_bs, y_bs, train_size=0.8, random_state=1)\n",
    "random_forest_bs = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_bs.fit(X_train_bs, y_train_bs)\n",
    "\n",
    "X_sa = combats_spattack_attack.drop('First_win', axis=1)\n",
    "y_sa = combats_spattack_attack['First_win']\n",
    "X_train_sa, X_test_sa, y_train_sa, y_test_sa = train_test_split(X_sa, y_sa, train_size=0.8, random_state=1)\n",
    "random_forest_sa = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_sa.fit(X_train_sa, y_train_sa)\n",
    "\n",
    "X_sb = combats_spattack_balance.drop('First_win', axis=1)\n",
    "y_sb = combats_spattack_balance['First_win']\n",
    "X_train_sb, X_test_sb, y_train_sb, y_test_sb = train_test_split(X_sb, y_sb, train_size=0.8, random_state=1)\n",
    "random_forest_sb = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_sb.fit(X_train_sb, y_train_sb)\n",
    "\n",
    "X_ss = combats_spattack_spattack.drop('First_win', axis=1)\n",
    "y_ss = combats_spattack_spattack['First_win']\n",
    "X_train_ss, X_test_ss, y_train_ss, y_test_ss = train_test_split(X_ss, y_ss, train_size=0.8, random_state=1)\n",
    "random_forest_ss = RandomForestClassifier(n_estimators=100)\n",
    "random_forest_ss.fit(X_train_ss, y_train_ss)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "first_pokemon = 'Bulbasaur'\n",
    "second_pokemon = 'Mewtwo'\n",
    "pokemon['ra'] = pokemon['Attack'] / pokemon['Sp. Atk']\n",
    "p = pokemon.loc[pokemon['Name'] == first_pokemon]\n",
    "q = pokemon.loc[pokemon['Name'] == second_pokemon]\n",
    "\n",
    "pokemon_pick = pd.DataFrame({'First_pokemon_hp':[p.iloc[0,4]],'First_pokemon_attack':[p.iloc[0,5]],\n",
    "                              'First_pokemon_defense':[p.iloc[0,6]],'First_pokemon_spattack':[p.iloc[0,7]],\n",
    "                              'First_pokemon_spdefense':[p.iloc[0,8]],'First_pokemon_speed':[p.iloc[0,9]],\n",
    "                              'First_pokemon_stats':[p.iloc[0,10]],'First_pokemon_ratio':[p.iloc[0,12]],\n",
    "                              'Second_pokemon_hp':[q.iloc[0,4]],'Second_pokemon_attack':[q.iloc[0,5]],\n",
    "                              'Second_pokemon_defense':[q.iloc[0,6]],'Second_pokemon_spattack':[q.iloc[0,7]],\n",
    "                              'Second_pokemon_spdefense':[q.iloc[0,8]],'Second_pokemon_speed':[q.iloc[0,9]],\n",
    "                              'Second_pokemon_stats':[q.iloc[0,10]],'Second_pokemon_ratio':[q.iloc[0,12]],\n",
    "                              'First_pokemon_type':[p.iloc[0,11]],'Second_pokemon_type':[q.iloc[0,11]]}) \n",
    "\n",
    "def TypeRelation(pokemon_pick):\n",
    "    r0 = 1\n",
    "    first_type1 = pokemon_pick[\"First_pokemon_type\"].split(\"/\")[0]\n",
    "    first_type2 = pokemon_pick[\"First_pokemon_type\"].split(\"/\")[1]\n",
    "    second_type1 = pokemon_pick[\"Second_pokemon_type\"].split(\"/\")[0]\n",
    "    second_type2 = pokemon_pick[\"Second_pokemon_type\"].split(\"/\")[1]\n",
    "    if first_type2 != \"None\" and second_type2 != \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r2 = df_type_relation[first_type1][second_type2]\n",
    "        r3 = df_type_relation[first_type2][second_type1]\n",
    "        r4 = df_type_relation[first_type2][second_type2]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r6 = df_type_relation[second_type1][first_type2]\n",
    "        r7 = df_type_relation[second_type2][first_type1]\n",
    "        r8 = df_type_relation[second_type2][first_type2]\n",
    "        r = r0 * r1 * r2 * r3 * r4 - r0 * r5 * r6 * r7 * r8\n",
    "    elif first_type2 != \"None\" and second_type2 == \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r3 = df_type_relation[first_type2][second_type1]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r6 = df_type_relation[second_type1][first_type2] \n",
    "        r = r0 * r1 * r3 - r0 * r5 *r6\n",
    "    elif first_type2 == \"None\" and second_type2 != \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r2 = df_type_relation[first_type1][second_type2]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r7 = df_type_relation[second_type2][first_type1]\n",
    "        r = r0 * r1 * r2 - r0 * r5 * r7\n",
    "    elif first_type2 == \"None\" and second_type2 == \"None\":\n",
    "        r1 = df_type_relation[first_type1][second_type1]\n",
    "        r5 = df_type_relation[second_type1][first_type1]\n",
    "        r = r0 * r1 - r0 * r5\n",
    "    return r\n",
    "\n",
    "pokemon_pick['Relation'] = pokemon_pick.apply(lambda x: TypeRelation(x), axis = 1)\n",
    "pokemon_pick = pokemon_pick.drop(['First_pokemon_type','Second_pokemon_type'], axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "combats_attack = combats_add_data.loc[combats_add_data['First_pokemon_ra'] >= 1.5]\n",
    "#combats_attack_attack\n",
    "combats_attack_attack = combats_attack.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_attack_attack = combats_attack_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_attack_balance\n",
    "combats_attack_balance = combats_attack.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_attack_balance = combats_attack_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_attack_balance = combats_attack_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_attack_spattack\n",
    "combats_attack_spattack = combats_attack.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_attack_spattack = combats_attack_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "\n",
    "combats_balance = combats_add_data.loc[combats_add_data['First_pokemon_ra'] < 1.5]\n",
    "combats_balance = combats_balance.loc[combats_add_data['First_pokemon_ra'] > 0.666667]\n",
    "#combats_balance_attack\n",
    "combats_balance_attack = combats_balance.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_balance_attack = combats_balance_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_balance_balance\n",
    "combats_balance_balance = combats_balance.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_balance_balance = combats_balance_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_balance_balance = combats_balance_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_balance_spattack\n",
    "combats_balance_spattack = combats_balance.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_balance_spattack = combats_balance_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "\n",
    "combats_spattack = combats_add_data.loc[combats_add_data['First_pokemon_ra'] <= 0.666667]\n",
    "#combats_spattack_attack\n",
    "combats_spattack_attack = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] >= 1.5]\n",
    "combats_spattack_attack = combats_spattack_attack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_spattack_balance\n",
    "combats_spattack_balance = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] < 1.5]\n",
    "combats_spattack_balance = combats_spattack_balance.loc[combats_add_data['Second_pokemon_ra'] > 0.666667]\n",
    "combats_spattack_balance = combats_spattack_balance.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)\n",
    "#combats_spattack_spattack\n",
    "combats_spattack_spattack = combats_spattack.loc[combats_add_data['Second_pokemon_ra'] <= 0.666667]\n",
    "combats_spattack_spattack = combats_spattack_spattack.drop(['First_pokemon_ra','Second_pokemon_ra'],axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "if p.iloc[0,13] >= 1.5:\n",
    "    if q.iloc[0,13] >= 1.5:\n",
    "        random_forest = random_forest_aa\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_attack_attack['First_pokemon_hp'].mean()) / combats_attack_attack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_attack_attack['First_pokemon_attack'].mean()) / combats_attack_attack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_attack_attack['First_pokemon_defense'].mean()) / combats_attack_attack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_attack_attack['First_pokemon_spattack'].mean()) / combats_attack_attack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_attack_attack['First_pokemon_spdefense'].mean()) / combats_attack_attack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_attack_attack['First_pokemon_speed'].mean()) / combats_attack_attack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_attack_attack['First_pokemon_stats'].mean()) / combats_attack_attack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_attack_attack['Second_pokemon_hp'].mean()) / combats_attack_attack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_attack_attack['Second_pokemon_attack'].mean()) / combats_attack_attack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_attack_attack['Second_pokemon_defense'].mean()) / combats_attack_attack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_attack_attack['Second_pokemon_spattack'].mean()) / combats_attack_attack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_attack_attack['Second_pokemon_spdefense'].mean()) / combats_attack_attack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_attack_attack['Second_pokemon_speed'].mean()) / combats_attack_attack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_attack_attack['Second_pokemon_stats'].mean()) / combats_attack_attack['Second_pokemon_stats'].std()\n",
    "    elif q.iloc[0,13] <= 0.666667:\n",
    "        random_forest = random_forest_as\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_attack_spattack['First_pokemon_hp'].mean()) / combats_attack_spattack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_attack_spattack['First_pokemon_attack'].mean()) / combats_attack_spattack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_attack_spattack['First_pokemon_defense'].mean()) / combats_attack_spattack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_attack_spattack['First_pokemon_spattack'].mean()) / combats_attack_spattack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_attack_spattack['First_pokemon_spdefense'].mean()) / combats_attack_spattack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_attack_spattack['First_pokemon_speed'].mean()) / combats_attack_spattack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_attack_spattack['First_pokemon_stats'].mean()) / combats_attack_spattack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_attack_spattack['Second_pokemon_hp'].mean()) / combats_attack_spattack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_attack_spattack['Second_pokemon_attack'].mean()) / combats_attack_spattack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_attack_spattack['Second_pokemon_defense'].mean()) / combats_attack_spattack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_attack_spattack['Second_pokemon_spattack'].mean()) / combats_attack_spattack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_attack_spattack['Second_pokemon_spdefense'].mean()) / combats_attack_spattack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_attack_spattack['Second_pokemon_speed'].mean()) / combats_attack_spattack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_attack_spattack['Second_pokemon_stats'].mean()) / combats_attack_spattack['Second_pokemon_stats'].std()\n",
    "    else :\n",
    "        random_forest = random_forest_ab\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_attack_balance['First_pokemon_hp'].mean()) / combats_attack_balance['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_attack_balance['First_pokemon_attack'].mean()) / combats_attack_balance['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_attack_balance['First_pokemon_defense'].mean()) / combats_attack_balance['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_attack_balance['First_pokemon_spattack'].mean()) / combats_attack_balance['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_attack_balance['First_pokemon_spdefense'].mean()) / combats_attack_balance['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_attack_balance['First_pokemon_speed'].mean()) / combats_attack_balance['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_attack_balance['First_pokemon_stats'].mean()) / combats_attack_balance['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_attack_balance['Second_pokemon_hp'].mean()) / combats_attack_balance['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_attack_balance['Second_pokemon_attack'].mean()) / combats_attack_balance['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_attack_balance['Second_pokemon_defense'].mean()) / combats_attack_balance['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_attack_balance['Second_pokemon_spattack'].mean()) / combats_attack_balance['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_attack_balance['Second_pokemon_spdefense'].mean()) / combats_attack_balance['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_attack_balance['Second_pokemon_speed'].mean()) / combats_attack_balance['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_attack_balance['Second_pokemon_stats'].mean()) / combats_attack_balance['Second_pokemon_stats'].std()\n",
    "elif p.iloc[0,13] <= 0.666667:\n",
    "    if q.iloc[0,13] >= 1.5:\n",
    "        random_forest = random_forest_sa\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_spattack_attack['First_pokemon_hp'].mean()) / combats_spattack_attack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_spattack_attack['First_pokemon_attack'].mean()) / combats_spattack_attack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_spattack_attack['First_pokemon_defense'].mean()) / combats_spattack_attack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_spattack_attack['First_pokemon_spattack'].mean()) / combats_spattack_attack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_spattack_attack['First_pokemon_spdefense'].mean()) / combats_spattack_attack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_spattack_attack['First_pokemon_speed'].mean()) / combats_spattack_attack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_spattack_attack['First_pokemon_stats'].mean()) / combats_spattack_attack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_spattack_attack['Second_pokemon_hp'].mean()) / combats_spattack_attack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_spattack_attack['Second_pokemon_attack'].mean()) / combats_spattack_attack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_spattack_attack['Second_pokemon_defense'].mean()) / combats_spattack_attack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_spattack_attack['Second_pokemon_spattack'].mean()) / combats_spattack_attack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_spattack_attack['Second_pokemon_spdefense'].mean()) / combats_spattack_attack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_spattack_attack['Second_pokemon_speed'].mean()) / combats_spattack_attack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_spattack_attack['Second_pokemon_stats'].mean()) / combats_spattack_attack['Second_pokemon_stats'].std()\n",
    "    elif q.iloc[0,13] <= 0.666667:\n",
    "        random_forest = random_forest_ss\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_spattack_spattack['First_pokemon_hp'].mean()) / combats_spattack_spattack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_spattack_spattack['First_pokemon_attack'].mean()) / combats_spattack_spattack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_spattack_spattack['First_pokemon_defense'].mean()) / combats_spattack_spattack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_spattack_spattack['First_pokemon_spattack'].mean()) / combats_spattack_spattack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_spattack_spattack['First_pokemon_spdefense'].mean()) / combats_spattack_spattack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_spattack_spattack['First_pokemon_speed'].mean()) / combats_spattack_spattack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_spattack_spattack['First_pokemon_stats'].mean()) / combats_spattack_spattack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_spattack_spattack['Second_pokemon_hp'].mean()) / combats_spattack_spattack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_spattack_spattack['Second_pokemon_attack'].mean()) / combats_spattack_spattack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_spattack_spattack['Second_pokemon_defense'].mean()) / combats_spattack_spattack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_spattack_spattack['Second_pokemon_spattack'].mean()) / combats_spattack_spattack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_spattack_spattack['Second_pokemon_spdefense'].mean()) / combats_spattack_spattack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_spattack_spattack['Second_pokemon_speed'].mean()) / combats_spattack_spattack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_spattack_spattack['Second_pokemon_stats'].mean()) / combats_spattack_spattack['Second_pokemon_stats'].std()\n",
    "    else :\n",
    "        random_forest = random_forest_sb\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_spattack_balance['First_pokemon_hp'].mean()) / combats_spattack_balance['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_spattack_balance['First_pokemon_attack'].mean()) / combats_spattack_balance['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_spattack_balance['First_pokemon_defense'].mean()) / combats_spattack_balance['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_spattack_balance['First_pokemon_spattack'].mean()) / combats_spattack_balance['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_spattack_balance['First_pokemon_spdefense'].mean()) / combats_spattack_balance['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_spattack_balance['First_pokemon_speed'].mean()) / combats_spattack_balance['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_spattack_balance['First_pokemon_stats'].mean()) / combats_spattack_balance['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_spattack_balance['Second_pokemon_hp'].mean()) / combats_spattack_balance['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_spattack_balance['Second_pokemon_attack'].mean()) / combats_spattack_balance['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_spattack_balance['Second_pokemon_defense'].mean()) / combats_spattack_balance['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_spattack_balance['Second_pokemon_spattack'].mean()) / combats_spattack_balance['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_spattack_balance['Second_pokemon_spdefense'].mean()) / combats_spattack_balance['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_spattack_balance['Second_pokemon_speed'].mean()) / combats_spattack_balance['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_spattack_balance['Second_pokemon_stats'].mean()) / combats_spattack_balance['Second_pokemon_stats'].std()\n",
    "else :\n",
    "    if q.iloc[0,13] >= 1.5:\n",
    "        random_forest = random_forest_ba\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_balance_attack['First_pokemon_hp'].mean()) / combats_balance_attack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_balance_attack['First_pokemon_attack'].mean()) / combats_balance_attack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_balance_attack['First_pokemon_defense'].mean()) / combats_balance_attack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_balance_attack['First_pokemon_spattack'].mean()) / combats_balance_attack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_balance_attack['First_pokemon_spdefense'].mean()) / combats_balance_attack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_balance_attack['First_pokemon_speed'].mean()) / combats_balance_attack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_balance_attack['First_pokemon_stats'].mean()) / combats_balance_attack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_balance_attack['Second_pokemon_hp'].mean()) / combats_balance_attack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_balance_attack['Second_pokemon_attack'].mean()) / combats_balance_attack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_balance_attack['Second_pokemon_defense'].mean()) / combats_balance_attack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_balance_attack['Second_pokemon_spattack'].mean()) / combats_balance_attack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_balance_attack['Second_pokemon_spdefense'].mean()) / combats_balance_attack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_balance_attack['Second_pokemon_speed'].mean()) / combats_balance_attack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_balance_attack['Second_pokemon_stats'].mean()) / combats_balance_attack['Second_pokemon_stats'].std()\n",
    "    elif q.iloc[0,13] <= 0.666667:\n",
    "        random_forest = random_forest_bs\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_balance_spattack['First_pokemon_hp'].mean()) / combats_balance_spattack['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_balance_spattack['First_pokemon_attack'].mean()) / combats_balance_spattack['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_balance_spattack['First_pokemon_defense'].mean()) / combats_balance_spattack['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_balance_spattack['First_pokemon_spattack'].mean()) / combats_balance_spattack['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_balance_spattack['First_pokemon_spdefense'].mean()) / combats_balance_spattack['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_balance_spattack['First_pokemon_speed'].mean()) / combats_balance_spattack['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_balance_spattack['First_pokemon_stats'].mean()) / combats_balance_spattack['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_balance_spattack['Second_pokemon_hp'].mean()) / combats_balance_spattack['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_balance_spattack['Second_pokemon_attack'].mean()) / combats_balance_spattack['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_balance_spattack['Second_pokemon_defense'].mean()) / combats_balance_spattack['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_balance_spattack['Second_pokemon_spattack'].mean()) / combats_balance_spattack['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_balance_spattack['Second_pokemon_spdefense'].mean()) / combats_balance_spattack['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_balance_spattack['Second_pokemon_speed'].mean()) / combats_balance_spattack['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_balance_spattack['Second_pokemon_stats'].mean()) / combats_balance_spattack['Second_pokemon_stats'].std()\n",
    "    else :\n",
    "        random_forest = random_forest_bb\n",
    "        pokemon_pick['First_pokemon_hp'] = (pokemon_pick['First_pokemon_hp'] - combats_balance_balance['First_pokemon_hp'].mean()) / combats_balance_balance['First_pokemon_hp'].std()\n",
    "        pokemon_pick['First_pokemon_attack'] = (pokemon_pick['First_pokemon_attack'] - combats_balance_balance['First_pokemon_attack'].mean()) / combats_balance_balance['First_pokemon_attack'].std()\n",
    "        pokemon_pick['First_pokemon_defense'] = (pokemon_pick['First_pokemon_defense'] - combats_balance_balance['First_pokemon_defense'].mean()) / combats_balance_balance['First_pokemon_defense'].std()\n",
    "        pokemon_pick['First_pokemon_spattack'] = (pokemon_pick['First_pokemon_spattack'] - combats_balance_balance['First_pokemon_spattack'].mean()) / combats_balance_balance['First_pokemon_spattack'].std()\n",
    "        pokemon_pick['First_pokemon_spdefense'] = (pokemon_pick['First_pokemon_spdefense'] - combats_balance_balance['First_pokemon_spdefense'].mean()) / combats_balance_balance['First_pokemon_spdefense'].std()\n",
    "        pokemon_pick['First_pokemon_speed'] = (pokemon_pick['First_pokemon_speed'] - combats_balance_balance['First_pokemon_speed'].mean()) / combats_balance_balance['First_pokemon_speed'].std()\n",
    "        pokemon_pick['First_pokemon_stats'] = (pokemon_pick['First_pokemon_stats'] - combats_balance_balance['First_pokemon_stats'].mean()) / combats_balance_balance['First_pokemon_stats'].std()\n",
    "        pokemon_pick['Second_pokemon_hp'] = (pokemon_pick['Second_pokemon_hp'] - combats_balance_balance['Second_pokemon_hp'].mean()) / combats_balance_balance['Second_pokemon_hp'].std()\n",
    "        pokemon_pick['Second_pokemon_attack'] = (pokemon_pick['Second_pokemon_attack'] - combats_balance_balance['Second_pokemon_attack'].mean()) / combats_balance_balance['Second_pokemon_attack'].std()\n",
    "        pokemon_pick['Second_pokemon_defense'] = (pokemon_pick['Second_pokemon_defense'] - combats_balance_balance['Second_pokemon_defense'].mean()) / combats_balance_balance['Second_pokemon_defense'].std()\n",
    "        pokemon_pick['Second_pokemon_spattack'] = (pokemon_pick['Second_pokemon_spattack'] - combats_balance_balance['Second_pokemon_spattack'].mean()) / combats_balance_balance['Second_pokemon_spattack'].std()\n",
    "        pokemon_pick['Second_pokemon_spdefense'] = (pokemon_pick['Second_pokemon_spdefense'] - combats_balance_balance['Second_pokemon_spdefense'].mean()) / combats_balance_balance['Second_pokemon_spdefense'].std()\n",
    "        pokemon_pick['Second_pokemon_speed'] = (pokemon_pick['Second_pokemon_speed'] - combats_balance_balance['Second_pokemon_speed'].mean()) / combats_balance_balance['Second_pokemon_speed'].std()\n",
    "        pokemon_pick['Second_pokemon_stats'] = (pokemon_pick['Second_pokemon_stats'] - combats_balance_balance['Second_pokemon_stats'].mean()) / combats_balance_balance['Second_pokemon_stats'].std()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Winner is Mewtwo\n"
     ]
    }
   ],
   "source": [
    "r = random_forest.predict(pokemon_pick).item(0)\n",
    "\n",
    "if r == 1:\n",
    "    print ('Winner is ' + first_pokemon)\n",
    "else :\n",
    "    print ('Winner is ' + second_pokemon)   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
